/* auto-generated by generate_json_header.py */

#ifndef ngx_array_entries
#define ngx_array_entries(x)     (sizeof(x) / sizeof(x[0]))
#endif

#ifndef ngx_copy_fix
#define ngx_copy_fix(dst, src)   ngx_copy(dst, (src), sizeof(src) - 1)
#endif

#ifndef ngx_copy_str
#define ngx_copy_str(dst, src)   ngx_copy(dst, (src).data, (src).len)
#endif

/* ngx_kmp_out_track_json reader */

typedef struct {
    ngx_str_t          channel_id;
    ngx_str_t          track_id;
    ngx_json_array_t  *upstreams;
} ngx_kmp_out_track_json_t;


static ngx_json_prop_t  ngx_kmp_out_track_json_channel_id = {
    ngx_string("channel_id"),
    2708992856568279ULL,
    NGX_JSON_STRING,
    ngx_json_set_str_slot,
    offsetof(ngx_kmp_out_track_json_t, channel_id),
    NULL
};


static ngx_json_prop_t  ngx_kmp_out_track_json_track_id = {
    ngx_string("track_id"),
    3295510395023ULL,
    NGX_JSON_STRING,
    ngx_json_set_str_slot,
    offsetof(ngx_kmp_out_track_json_t, track_id),
    NULL
};


static ngx_json_prop_t  ngx_kmp_out_track_json_upstreams = {
    ngx_string("upstreams"),
    102975156452856ULL,
    NGX_JSON_ARRAY,
    ngx_json_set_arr_slot,
    offsetof(ngx_kmp_out_track_json_t, upstreams),
    NULL
};


static ngx_json_prop_t  *ngx_kmp_out_track_json[] = {
    NULL,
    &ngx_kmp_out_track_json_upstreams,
    NULL,
    &ngx_kmp_out_track_json_track_id,
    &ngx_kmp_out_track_json_channel_id,
};


/* ngx_kmp_out_track_video_json writer */

static size_t
ngx_kmp_out_track_video_json_get_size(ngx_kmp_out_track_t *obj)
{
    size_t  result;

    result =
        sizeof("\"media_type\":\"video\",\"bitrate\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"codec_id\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"extra_data\":\"") - 1 + obj->extra_data.len * 2 +
        sizeof("\",\"width\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"height\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"frame_rate\":") - 1 + NGX_INT32_LEN + 3 +
        sizeof(",\"cea_captions\":") - 1 + sizeof("false") - 1;

    return result;
}


static u_char *
ngx_kmp_out_track_video_json_write(u_char *p, ngx_kmp_out_track_t *obj)
{
    uint32_t  n, d;

    p = ngx_copy_fix(p, "\"media_type\":\"video\",\"bitrate\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->media_info.bitrate);
    p = ngx_copy_fix(p, ",\"codec_id\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->media_info.codec_id);
    p = ngx_copy_fix(p, ",\"extra_data\":\"");
    p = ngx_hex_dump(p, obj->extra_data.data, obj->extra_data.len);
    p = ngx_copy_fix(p, "\",\"width\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->media_info.u.video.width);
    p = ngx_copy_fix(p, ",\"height\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->media_info.u.video.height);
    p = ngx_copy_fix(p, ",\"frame_rate\":");
    d = obj->media_info.u.video.frame_rate.denom;
    if (d) {
        n = obj->media_info.u.video.frame_rate.num;
        p = ngx_sprintf(p, "%uD.%02uD", (uint32_t) (n / d), (uint32_t) (n % d
            * 100) / d);

    } else {
        *p++ = '0';
    }

    p = ngx_copy_fix(p, ",\"cea_captions\":");
    if (obj->media_info.u.video.cea_captions) {
        p = ngx_copy_fix(p, "true");

    } else {
        p = ngx_copy_fix(p, "false");
    }


    return p;
}


/* ngx_kmp_out_track_audio_json writer */

static size_t
ngx_kmp_out_track_audio_json_get_size(ngx_kmp_out_track_t *obj)
{
    size_t  result;

    result =
        sizeof("\"media_type\":\"audio\",\"bitrate\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"codec_id\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"extra_data\":\"") - 1 + obj->extra_data.len * 2 +
        sizeof("\",\"channels\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"channel_layout\":\"") - 1 + sizeof(uint64_t) * 2 +
        sizeof("\",\"bits_per_sample\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"sample_rate\":") - 1 + NGX_INT32_LEN;

    return result;
}


static u_char *
ngx_kmp_out_track_audio_json_write(u_char *p, ngx_kmp_out_track_t *obj)
{
    p = ngx_copy_fix(p, "\"media_type\":\"audio\",\"bitrate\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->media_info.bitrate);
    p = ngx_copy_fix(p, ",\"codec_id\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->media_info.codec_id);
    p = ngx_copy_fix(p, ",\"extra_data\":\"");
    p = ngx_hex_dump(p, obj->extra_data.data, obj->extra_data.len);
    p = ngx_copy_fix(p, "\",\"channels\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->media_info.u.audio.channels);
    p = ngx_copy_fix(p, ",\"channel_layout\":\"");
    p = ngx_sprintf(p, "%uxL", (uint64_t)
        obj->media_info.u.audio.channel_layout);
    p = ngx_copy_fix(p, "\",\"bits_per_sample\":");
    p = ngx_sprintf(p, "%uD", (uint32_t)
        obj->media_info.u.audio.bits_per_sample);
    p = ngx_copy_fix(p, ",\"sample_rate\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->media_info.u.audio.sample_rate);

    return p;
}


/* ngx_kmp_out_track_subtitle_json writer */

static size_t
ngx_kmp_out_track_subtitle_json_get_size(ngx_kmp_out_track_t *obj)
{
    size_t  result;

    result =
        sizeof("\"media_type\":\"subtitle\",\"bitrate\":") - 1 + NGX_INT32_LEN
            +
        sizeof(",\"codec_id\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"extra_data\":\"") - 1 + obj->extra_data.len * 2 +
        sizeof("\"") - 1;

    return result;
}


static u_char *
ngx_kmp_out_track_subtitle_json_write(u_char *p, ngx_kmp_out_track_t *obj)
{
    p = ngx_copy_fix(p, "\"media_type\":\"subtitle\",\"bitrate\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->media_info.bitrate);
    p = ngx_copy_fix(p, ",\"codec_id\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->media_info.codec_id);
    p = ngx_copy_fix(p, ",\"extra_data\":\"");
    p = ngx_hex_dump(p, obj->extra_data.data, obj->extra_data.len);
    *p++ = '\"';

    return p;
}


/* ngx_kmp_out_track_publish_json writer */

static size_t
ngx_kmp_out_track_publish_json_get_size(ngx_kmp_out_track_t *obj)
{
    size_t  result;

    result =
        sizeof("\"event_type\":\"publish\",\"input_id\":\"") - 1 +
            ngx_json_str_get_size(&obj->input_id) +
        sizeof("\"") - 1;

    return result;
}


static u_char *
ngx_kmp_out_track_publish_json_write(u_char *p, ngx_kmp_out_track_t *obj)
{
    p = ngx_copy_fix(p, "\"event_type\":\"publish\",\"input_id\":\"");
    p = ngx_json_str_write(p, &obj->input_id);
    *p++ = '\"';

    return p;
}


/* ngx_kmp_out_track_unpublish_json writer */

static size_t
ngx_kmp_out_track_unpublish_json_get_size(ngx_kmp_out_track_t *obj)
{
    size_t  result;

    result =
        sizeof("\"event_type\":\"unpublish\",\"input_id\":\"") - 1 +
            ngx_json_str_get_size(&obj->input_id) +
        sizeof("\",\"reason\":\"") - 1 +
            ngx_json_str_get_size(&obj->unpublish_reason) +
        sizeof("\"") - 1;

    return result;
}


static u_char *
ngx_kmp_out_track_unpublish_json_write(u_char *p, ngx_kmp_out_track_t *obj)
{
    p = ngx_copy_fix(p, "\"event_type\":\"unpublish\",\"input_id\":\"");
    p = ngx_json_str_write(p, &obj->input_id);
    p = ngx_copy_fix(p, "\",\"reason\":\"");
    p = ngx_json_str_write(p, &obj->unpublish_reason);
    *p++ = '\"';

    return p;
}


/* ngx_kmp_out_track_upstreams_json writer */

size_t
ngx_kmp_out_track_upstreams_json_get_size(ngx_kmp_out_track_t *obj)
{
    size_t                   result;
    ngx_queue_t             *q;
    ngx_kmp_out_upstream_t  *cur;

    result =
        sizeof("[") - 1 +
        sizeof("]") - 1;

    for (q = ngx_queue_head(&obj->upstreams);
        q != ngx_queue_sentinel(&obj->upstreams);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_kmp_out_upstream_t, queue);
        result += ngx_kmp_out_upstream_json_get_size(cur) + sizeof(",") - 1;
    }

    return result;
}


u_char *
ngx_kmp_out_track_upstreams_json_write(u_char *p, ngx_kmp_out_track_t *obj)
{
    ngx_queue_t             *q;
    ngx_kmp_out_upstream_t  *cur;

    *p++ = '[';

    for (q = ngx_queue_head(&obj->upstreams);
        q != ngx_queue_sentinel(&obj->upstreams);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_kmp_out_upstream_t, queue);

        if (p[-1] != '[') {
            *p++ = ',';
        }

        p = ngx_kmp_out_upstream_json_write(p, cur);
    }

    *p++ = ']';

    return p;
}


/* ngx_kmp_out_track_upstream_ids_json writer */

size_t
ngx_kmp_out_track_upstream_ids_json_get_size(ngx_kmp_out_track_t *obj)
{
    size_t                   result;
    ngx_queue_t             *q;
    ngx_kmp_out_upstream_t  *cur;

    result =
        sizeof("[") - 1 +
        sizeof("]") - 1;

    for (q = ngx_queue_head(&obj->upstreams);
        q != ngx_queue_sentinel(&obj->upstreams);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_kmp_out_upstream_t, queue);
        result += cur->id.s.len + cur->id.escape + sizeof(",\"\"") - 1;
    }

    return result;
}


u_char *
ngx_kmp_out_track_upstream_ids_json_write(u_char *p, ngx_kmp_out_track_t *obj)
{
    ngx_queue_t             *q;
    ngx_kmp_out_upstream_t  *cur;

    *p++ = '[';

    for (q = ngx_queue_head(&obj->upstreams);
        q != ngx_queue_sentinel(&obj->upstreams);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_kmp_out_upstream_t, queue);

        if (p[-1] != '[') {
            *p++ = ',';
        }

        *p++ = '"';
        p = ngx_json_str_write_escape(p, &cur->id.s, cur->id.escape);
        *p++ = '"';
    }

    *p++ = ']';

    return p;
}


/* ngx_kmp_out_track_fields_json writer */

static size_t
ngx_kmp_out_track_fields_json_get_size(ngx_kmp_out_track_t *obj)
{
    size_t  result;

    result =
        sizeof("\"input_id\":\"") - 1 + ngx_json_str_get_size(&obj->input_id) +
        sizeof("\",\"channel_id\":\"") - 1 +
            ngx_json_str_get_size(&obj->channel_id) +
        sizeof("\",\"track_id\":\"") - 1 +
            ngx_json_str_get_size(&obj->track_id) +
        sizeof("\",\"mem_left\":") - 1 + NGX_SIZE_T_LEN +
        sizeof(",\"mem_limit\":") - 1 + NGX_SIZE_T_LEN +
        sizeof(",\"last_timestamp\":") - 1 + NGX_INT64_LEN +
        sizeof(",\"last_created\":") - 1 + NGX_INT64_LEN +
        sizeof(",\"sent_frames\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"sent_key_frames\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"written\":") - 1 + NGX_SIZE_T_LEN +
        sizeof(",\"bitrate\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"frame_rate\":") - 1 + NGX_INT32_LEN + 1 +
        sizeof(",") - 1 + ngx_kmp_out_track_info_json_get_size(obj) +
        sizeof(",") - 1 + ngx_kmp_out_track_media_info_json_get_size(obj) +
        sizeof(",\"upstreams\":") - 1 +
            ngx_kmp_out_track_upstreams_json_get_size(obj);

    return result;
}


static u_char *
ngx_kmp_out_track_fields_json_write(u_char *p, ngx_kmp_out_track_t *obj)
{
    u_char  *next;

    p = ngx_copy_fix(p, "\"input_id\":\"");
    p = ngx_json_str_write(p, &obj->input_id);
    p = ngx_copy_fix(p, "\",\"channel_id\":\"");
    p = ngx_json_str_write(p, &obj->channel_id);
    p = ngx_copy_fix(p, "\",\"track_id\":\"");
    p = ngx_json_str_write(p, &obj->track_id);
    p = ngx_copy_fix(p, "\",\"mem_left\":");
    p = ngx_sprintf(p, "%uz", (size_t) obj->mem_left);
    p = ngx_copy_fix(p, ",\"mem_limit\":");
    p = ngx_sprintf(p, "%uz", (size_t) obj->mem_limit);
    p = ngx_copy_fix(p, ",\"last_timestamp\":");
    p = ngx_sprintf(p, "%L", (int64_t) obj->stats.last_timestamp);
    p = ngx_copy_fix(p, ",\"last_created\":");
    p = ngx_sprintf(p, "%L", (int64_t) obj->stats.last_created);
    p = ngx_copy_fix(p, ",\"sent_frames\":");
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->stats.sent_frames);
    p = ngx_copy_fix(p, ",\"sent_key_frames\":");
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->stats.sent_key_frames);
    p = ngx_copy_fix(p, ",\"written\":");
    p = ngx_sprintf(p, "%uz", (size_t) obj->stats.written);
    p = ngx_copy_fix(p, ",\"bitrate\":");
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->stats.bitrate);
    p = ngx_copy_fix(p, ",\"frame_rate\":");
    p = ngx_sprintf(p, "%uD.%02uD", (uint32_t) (obj->stats.frame_rate / 100),
        (uint32_t) (obj->stats.frame_rate % 100));
    *p++ = ',';
    next = ngx_kmp_out_track_info_json_write(p, obj);
    p = next == p ? p - 1 : next;
    *p++ = ',';
    p = ngx_kmp_out_track_media_info_json_write(p, obj);
    p = ngx_copy_fix(p, ",\"upstreams\":");
    p = ngx_kmp_out_track_upstreams_json_write(p, obj);

    return p;
}


/* ngx_kmp_out_track_json writer */

size_t
ngx_kmp_out_track_json_get_size(ngx_kmp_out_track_t *obj)
{
    size_t  result;

    if (!obj) {
        return sizeof("null") - 1;
    }

    result =
        sizeof("{\"kmp_out_id\":\"") - 1 + obj->sn.str.len + obj->id_escape +
        sizeof("\",") - 1 + ngx_kmp_out_track_fields_json_get_size(obj) +
        sizeof("}") - 1;

    return result;
}


u_char *
ngx_kmp_out_track_json_write(u_char *p, ngx_kmp_out_track_t *obj)
{
    if (!obj) {
        p = ngx_copy_fix(p, "null");
        return p;
    }

    p = ngx_copy_fix(p, "{\"kmp_out_id\":\"");
    p = ngx_json_str_write_escape(p, &obj->sn.str, obj->id_escape);
    p = ngx_copy_fix(p, "\",");
    p = ngx_kmp_out_track_fields_json_write(p, obj);
    *p++ = '}';

    return p;
}


/* ngx_kmp_out_track_int_json writer */

static size_t
ngx_kmp_out_track_int_json_get_size(ngx_kmp_out_track_t *obj)
{
    size_t  result;

    result =
        sizeof("{") - 1 + ngx_kmp_out_track_fields_json_get_size(obj) +
        sizeof("}") - 1;

    return result;
}


static u_char *
ngx_kmp_out_track_int_json_write(u_char *p, ngx_kmp_out_track_t *obj)
{
    *p++ = '{';
    p = ngx_kmp_out_track_fields_json_write(p, obj);
    *p++ = '}';

    return p;
}


/* ngx_kmp_out_tracks_json writer */

size_t
ngx_kmp_out_tracks_json_get_size(void *obj)
{
    size_t                result;
    ngx_queue_t          *q;
    ngx_kmp_out_track_t  *cur;

    result =
        sizeof("{") - 1 +
        sizeof("}") - 1;

    for (q = ngx_queue_head(&ngx_kmp_out_tracks.queue);
        q != ngx_queue_sentinel(&ngx_kmp_out_tracks.queue);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_kmp_out_track_t, queue);
        result += cur->sn.str.len + cur->id_escape;
        result += ngx_kmp_out_track_int_json_get_size(cur) + sizeof(",\"\":")
            - 1;
    }

    return result;
}


u_char *
ngx_kmp_out_tracks_json_write(u_char *p, void *obj)
{
    ngx_queue_t          *q;
    ngx_kmp_out_track_t  *cur;

    *p++ = '{';

    for (q = ngx_queue_head(&ngx_kmp_out_tracks.queue);
        q != ngx_queue_sentinel(&ngx_kmp_out_tracks.queue);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_kmp_out_track_t, queue);

        if (p[-1] != '{') {
            *p++ = ',';
        }

        *p++ = '"';
        p = ngx_json_str_write_escape(p, &cur->sn.str, cur->id_escape);
        *p++ = '"';
        *p++ = ':';
        p = ngx_kmp_out_track_int_json_write(p, cur);
    }

    *p++ = '}';

    return p;
}


/* ngx_kmp_out_track_ids_json writer */

size_t
ngx_kmp_out_track_ids_json_get_size(void *obj)
{
    size_t                result;
    ngx_queue_t          *q;
    ngx_kmp_out_track_t  *cur;

    result =
        sizeof("[") - 1 +
        sizeof("]") - 1;

    for (q = ngx_queue_head(&ngx_kmp_out_tracks.queue);
        q != ngx_queue_sentinel(&ngx_kmp_out_tracks.queue);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_kmp_out_track_t, queue);
        result += cur->sn.str.len + cur->id_escape + sizeof(",\"\"") - 1;
    }

    return result;
}


u_char *
ngx_kmp_out_track_ids_json_write(u_char *p, void *obj)
{
    ngx_queue_t          *q;
    ngx_kmp_out_track_t  *cur;

    *p++ = '[';

    for (q = ngx_queue_head(&ngx_kmp_out_tracks.queue);
        q != ngx_queue_sentinel(&ngx_kmp_out_tracks.queue);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_kmp_out_track_t, queue);

        if (p[-1] != '[') {
            *p++ = ',';
        }

        *p++ = '"';
        p = ngx_json_str_write_escape(p, &cur->sn.str, cur->id_escape);
        *p++ = '"';
    }

    *p++ = ']';

    return p;
}
